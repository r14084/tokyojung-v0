import { useState, useEffect } from 'react'
import { Plus, ShoppingCart } from 'lucide-react'
import { type MenuItem, menuApi } from '../api/client'

interface MenuViewProps {
  onAddToCart: (menuItem: MenuItem, quantity?: number, notes?: string) => void
  onProceedToCart: () => void
  cartItemsCount: number
}

export function MenuView({ onAddToCart, onProceedToCart, cartItemsCount }: MenuViewProps) {
  const [menuItems, setMenuItems] = useState<MenuItem[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchMenu = async () => {
      try {
        setLoading(true)
        console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π...')
        console.log('API URL:', import.meta.env.VITE_API_URL)
        const items = await menuApi.getAll()
        console.log('üìã ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', items)
        setMenuItems(items)
        setError(null)
      } catch (err) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ:', err)
        setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
      } finally {
        setLoading(false)
      }
    }

    fetchMenu()
  }, [])

  if (loading) {
    return (
      <div className="menu-view">
        <div className="menu-header">
          <h2>üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤</h2>
          <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="menu-view">
        <div className="menu-header">
          <h2>üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤</h2>
          <p style={{ color: 'red' }}>{error}</p>
        </div>
      </div>
    )
  }

  const kanomItems = menuItems.filter(item => item.category === 'KANOM') || []
  const drinkItems = menuItems.filter(item => item.category === 'DRINK') || []

  return (
    <div className="menu-view">
      <div className="menu-header">
        <h2>üçΩÔ∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤</h2>
        <p>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏°‡∏Ñ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö</p>
      </div>

      {/* Kanom Section */}
      <section className="menu-section">
        <h3 className="section-title">ü•û ‡∏Ç‡∏ô‡∏°‡∏Ñ‡∏£‡∏Å (Kanom Krok)</h3>
        <div className="menu-grid">
          {kanomItems.map(item => (
            <MenuItemCard 
              key={item.id} 
              item={item} 
              onAddToCart={onAddToCart}
            />
          ))}
        </div>
      </section>

      {/* Drinks Section */}
      <section className="menu-section">
        <h3 className="section-title">ü•§ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° (Drinks)</h3>
        <div className="menu-grid">
          {drinkItems.map(item => (
            <MenuItemCard 
              key={item.id} 
              item={item} 
              onAddToCart={onAddToCart}
            />
          ))}
        </div>
      </section>

      {/* Cart Button */}
      {cartItemsCount > 0 && (
        <div className="cart-button-container">
          <button 
            className="cart-button"
            onClick={onProceedToCart}
          >
            <ShoppingCart size={20} />
            <span>‡∏î‡∏π‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ({cartItemsCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)</span>
          </button>
        </div>
      )}
    </div>
  )
}

interface MenuItemCardProps {
  item: MenuItem
  onAddToCart: (menuItem: MenuItem, quantity?: number, notes?: string) => void
}

function MenuItemCard({ item, onAddToCart }: MenuItemCardProps) {
  const handleAddToCart = () => {
    onAddToCart(item, 1)
  }

  return (
    <div className="menu-item-card">
      <div className="item-image">
        {item.category === 'KANOM' ? 'ü•û' : 'ü•§'}
      </div>
      
      <div className="item-content">
        <h4 className="item-name">{item.name}</h4>
        {item.nameEn && (
          <p className="item-name-en">{item.nameEn}</p>
        )}
        {item.description && (
          <p className="item-description">{item.description}</p>
        )}
        
        <div className="item-footer">
          <span className="item-price">‡∏ø{Number(item.price).toFixed(0)}</span>
          <button 
            className="add-button"
            onClick={handleAddToCart}
            disabled={!item.available}
          >
            <Plus size={16} />
            {item.available ? '‡πÄ‡∏û‡∏¥‡πà‡∏°' : '‡∏´‡∏°‡∏î'}
          </button>
        </div>
      </div>
      
      {!item.available && (
        <div className="item-unavailable">‡∏´‡∏°‡∏î</div>
      )}
    </div>
  )
}